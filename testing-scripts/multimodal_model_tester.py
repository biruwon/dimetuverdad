#!/usr/bin/env python3
"""
Simple test: Download a small image and ask each multimodal model to describe it.
"""

import asyncio
import time
import base64
import requests
import ollama
from analyzer.prompts import EnhancedPromptGenerator

async def test_model_simple(model_name: str):
    """Test a single model with image + text analysis task."""
    print(f"\nüß™ Testing {model_name}...")

    start_time = time.time()

    try:
        # Use test images from the post
        image_url = "https://pbs.twimg.com/media/G215HUGXIAA0oPI?format=jpg&name=large"
        #image_url_2 = "https://pbs.twimg.com/media/G2-U8hFWYAAVS4B?format=jpg&name=small"
        print(f"üì• Downloading media: {image_url}")
        #print(f"ÔøΩ Downloading media: {image_url_2}")

        # Download first image
        response1 = requests.get(image_url, timeout=10)
        response1.raise_for_status()
        image_data_1 = base64.b64encode(response1.content).decode('utf-8')
        print(f"‚úÖ Downloaded image 1: {len(image_data_1)} bytes")

        # Download second image
        #response2 = requests.get(image_url_2, timeout=10)
        #response2.raise_for_status()
        #image_data_2 = base64.b64encode(response2.content).decode('utf-8')
        #print(f"‚úÖ Downloaded image 2: {len(image_data_2)} bytes")

        # Test the model with both images and text
        print("ü§ñ Asking model to analyze images + text...")

        # Post text is included directly in the prompt above

        # Use standardized Gemini analysis prompt for image content
        prompt = f"""
TEXTO DEL POST:
"A la Barbie Gaza la cazan y√©ndose a Ibiza con maletas de Louis Vuitton (m√°s de 1.000 euros) con el dinero que ha ganado esta semana en las televisiones corruptas con la farsa de la flotilla antisemita. Gracias a Dios que Trump le he cortado el chollo con la paz en Palestina. Esta gente solo usa los conflictos y dramas para hacer caja. As√≠ nos va."

CONTEXTO:
Publicaci√≥n en red social con texto e im√°genes. Analizar la combinaci√≥n visual y textual para identificar mensajes problem√°ticos, sesgo pol√≠tico, desinformaci√≥n o propaganda.

INSTRUCCIONES DE AN√ÅLISIS:
1. Examina tanto el texto como los elementos visuales (im√°genes) para identificar discurso de odio, sesgo pol√≠tico, extremismo o manipulaci√≥n medi√°tica.  
2. Observa s√≠mbolos, figuras p√∫blicas, memes, banderas, o lenguaje cargado que indique ideolog√≠a extremista o far-right.  
3. Eval√∫a si se presentan afirmaciones falsas, informaci√≥n fuera de contexto o narrativas conspirativas.  
4. Determina la categor√≠a m√°s apropiada seg√∫n la lista del sistema.  
5. Proporciona una breve explicaci√≥n que indique los elementos clave que justifican la categor√≠a.

FORMATO DE RESPUESTA:
CATEGOR√çA: [categor√≠a elegida]  
EXPLICACI√ìN: [razonamiento breve y neutral]
"""
        
        # Add system prompt for Ollama
        system_prompt = """
üîç SISTEMA DE MODERACI√ìN DE CONTENIDO ‚Äî DETECCI√ìN DE SESGO POL√çTICO Y DESINFORMACI√ìN

PROP√ìSITO:
Eres un analista autom√°tico de publicaciones en redes sociales en espa√±ol. 
Tu funci√≥n es identificar y clasificar contenido que pueda contener discurso de odio, desinformaci√≥n, propaganda o sesgo pol√≠tico extremo, con √©nfasis en ideolog√≠a de extrema derecha y manipulaci√≥n medi√°tica. 
No generes ni reproduzcas contenido da√±ino. Resume y analiza de forma neutral y objetiva.

TAREA PRINCIPAL:
Analiza texto, im√°genes y videos de publicaciones y clasifica el contenido en una sola categor√≠a de la lista a continuaci√≥n. Proporciona una explicaci√≥n breve y objetiva que indique los elementos clave (s√≠mbolos, tono, texto, referencias visuales).

CATEGOR√çAS DISPONIBLES:
- hate_speech: ataques directos o degradaci√≥n de grupos por etnia, religi√≥n, orientaci√≥n sexual, g√©nero o nacionalidad.
- anti_immigration: rechazo expl√≠cito o simb√≥lico hacia inmigrantes o minor√≠as.
- anti_lgbtq: ridiculizaci√≥n o negaci√≥n de derechos de personas LGBTQ+.
- anti_feminism: oposici√≥n al feminismo o promoci√≥n de roles de g√©nero tradicionales.
- nationalism: exaltaci√≥n nacionalista o s√≠mbolos patrios con carga pol√≠tica o de superioridad nacional.
- anti_government: cuestionamiento extremo o burla hacia instituciones o l√≠deres gubernamentales.
- disinformation: afirmaciones falsas, manipuladas o fuera de contexto que distorsionan la realidad.
- conspiracy_theory: narrativas de √©lites ocultas, manipulaci√≥n global o complots.
- call_to_action: exhortaciones expl√≠citas a actuar o movilizarse pol√≠ticamente.
- political_general: contenido pol√≠tico sin sesgo extremo.
- historical_revisionism: reinterpretaci√≥n falsa de hechos hist√≥ricos.
- general: sin contenido problem√°tico, neutral.

DIRECTRICES DE RESPUESTA:
1. Eval√∫a todo el contenido disponible: texto, im√°genes y videos.  
2. Selecciona la categor√≠a que mejor describa el mensaje global de la publicaci√≥n.  
3. Escribe una explicaci√≥n breve (2‚Äì4 oraciones) destacando los elementos clave que sustentan la decisi√≥n.  
4. Mant√©n tono neutral, objetivo y anal√≠tico.  
5. Si no hay se√±ales de contenido problem√°tico, responde ‚Äúgeneral‚Äù.

FORMATO DE RESPUESTA:
CATEGOR√çA: [una sola categor√≠a de la lista]  
EXPLICACI√ìN: [2‚Äì4 oraciones en espa√±ol, neutrales, descriptivas]

"""
        client = ollama.AsyncClient()

        response = await asyncio.wait_for(
            client.generate(
                model=model_name,
                system=system_prompt,
                prompt=prompt,
                images=[image_data_1],
                options = {
                    "temperature": 0.2,   # deterministic
                    "top_p": 0.7,         # focused token distribution
                    "num_predict": 250,   # short explanation, fewer tokens
                },
                keep_alive="10m",           # keep model in memory for repeated calls
            ),
            timeout=120.0
        )

        end_time = time.time()
        timing = end_time - start_time

        analysis = response.get('response', '').strip()

        print("‚úÖ Success!")
        print(f"‚è±Ô∏è  Time: {timing:.2f}s")
        print("üìù Full Analysis:")
        print("-" * 50)
        print(analysis)
        print("-" * 50)

    except asyncio.TimeoutError:
        end_time = time.time()
        timing = end_time - start_time
        print(f"‚ùå TIMEOUT: Model took {timing:.2f}s (limit: 60s)")

    except Exception as e:
        end_time = time.time()
        timing = end_time - start_time
        print(f"‚ùå Error: {e} (took {timing:.2f}s)")

async def main():
    """Test all multimodal models with image + text analysis."""
    models_to_test = [
        "gemma3:4b",
        "gemma3:12b",
        "gemma3:27b-it-qat",
    ]

    print("üöÄ Multimodal Model Test: Image + Text Analysis")
    print("üì∑ Using test image from X post")
    print("üìù Analyzing with Spanish political post text")
    print("‚ùì Asking for detailed analysis of image + text context")
    print("‚è∞ 60-second timeout per model")

    for model in models_to_test:
        await test_model_simple(model)

    print("\n‚úÖ All analysis tests completed!")

if __name__ == "__main__":
    asyncio.run(main())