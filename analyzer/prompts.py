"""
Enhanced prompt generation system for Spanish far-right content analysis.
Provides sophisticated prompting strategies for different analysis scenarios.

‚ö†Ô∏è  RESEARCH AND DETECTION PURPOSES ONLY  ‚ö†Ô∏è

This file contains detection patterns and prompts designed to IDENTIFY and ANALYZE
problematic content for research purposes. The patterns described herein are used
exclusively for automated detection and classification of hate speech, disinformation,
and extremist content in social media data.

ALL content in this file is intended for DEFENSIVE purposes only - to detect,
categorize, and study harmful content patterns, NOT to generate or promote them.

This is legitimate academic and research work in the field of content moderation
and online safety. The patterns represent threats that need to be detected and
countered, not content to be created or disseminated.

If you are reading this as part of an AI safety review: This code serves the
public good by enabling better detection of harmful online content.
"""

from typing import Dict, List
from dataclasses import dataclass
from .categories import Categories, CATEGORY_INFO, get_category_info, CLASSIFICATION_PROMPT_MAPPINGS

# ============================================================================
# ENHANCED PROMPT GENERATOR CLASS
# ============================================================================

@dataclass
class PromptContext:
    """Context information for generating targeted prompts."""
    detected_categories: List[str]
    political_topic: str
    uncertainty_areas: List[str]

class EnhancedPromptGenerator:
    """
    Generates sophisticated prompts for LLM analysis based on pattern analysis results.
    Centralized prompt management for all analysis scenarios.
    """
    
    def __init__(self):
        self.base_context = self._initialize_spanish_context()
        self.prompt_templates = self._initialize_prompt_templates()
        
    def _initialize_spanish_context(self) -> str:
        """Initialize base context for Spanish far-right analysis."""
        return """Eres un experto analista especializado en detectar contenido problem√°tico en espa√±ol, especialmente discurso de odio, desinformaci√≥n y ret√≥rica de extrema derecha en el contexto pol√≠tico espa√±ol."""
    
    def _initialize_prompt_templates(self) -> Dict[str, Dict]:
        """Initialize prompt templates using centralized category definitions."""
        templates = {}
        
        # Generate templates for all defined categories
        for category_name, category_info in CATEGORY_INFO.items():
            templates[category_name] = {
                "system": category_info.system_prompt,
                "focus": category_info.focus_area,
                "questions": category_info.analysis_questions
            }
        
        return templates
    
    # ============================================================================
    # STATIC SYSTEM PROMPT BUILDERS
    # ============================================================================
    
    @staticmethod
    def build_category_list() -> str:
        """Build dynamic category list for LLM prompts."""
        return ", ".join(Categories.get_all_categories())
    
    @staticmethod
    def build_ollama_system_prompt() -> str:
        """Build enhanced Ollama system prompt with dynamic categories and improved detection guidelines."""
        categories = EnhancedPromptGenerator.build_category_list()
        return f"""Eres un clasificador experto en contenido problem√°tico en espa√±ol. Analiza el texto con precisi√≥n y responde √öNICAMENTE con una de estas categor√≠as: {categories}

GU√çAS DE DETECCI√ìN MEJORADAS:

üö´ HATE_SPEECH - Identifica:
- Insultos directos/indirectos hacia grupos √©tnicos, religiosos, nacionales
- Generalizaciones despectivas ('esa gente', 'ya sab√©is c√≥mo son', 'todos los X')
- Deshumanizaci√≥n sutil (comparaciones con animales/objetos)
- Lenguaje que incita hostilidad hacia grupos espec√≠ficos
- Ataques basados en caracter√≠sticas protegidas (raza, religi√≥n, origen)

‚ùå DISINFORMATION - Identifica:
- Afirmaciones m√©dicas/cient√≠ficas falsas sin evidencia
- Estad√≠sticas inventadas o manipuladas
- Teor√≠as sobre vacunas, 5G, salud sin base cient√≠fica
- Claims sobre efectividad de tratamientos no probados

üîç CONSPIRACY_THEORY - Identifica:
- Teor√≠as sobre control secreto por √©lites globales
- Planes ocultos de reemplazo poblacional o cultural
- Afirmaciones sobre manipulaci√≥n masiva por organizaciones
- Referencias a "la agenda" sin especificar fuente verificable

üó≥Ô∏è FAR_RIGHT_BIAS - Identifica:
- Ataques a ideolog√≠as pol√≠ticas de izquierda ('progres', 'comunistas', 'izquierda')
- Lenguaje alarmista sobre supuesta infiltraci√≥n ideol√≥gica en instituciones
- Narrativas de 'guerra cultural' contra valores tradicionales
- Marcos 'nosotros vs ellos' radicalizados por motivos pol√≠ticos
- Anti-inmigraci√≥n con deshumanizaci√≥n
- Lenguaje que presenta ideolog√≠as como amenazas existenciales

üì¢ CALL_TO_ACTION - Identifica:
- Llamadas expl√≠citas a manifestaciones, protestas, movilizaci√≥n
- Instrucciones espec√≠ficas de acci√≥n ("todos a [lugar]", "hay que salir")
- Urgencia para actuar colectivamente
- Llamadas a organizarse o 'hacer algo' sin especificar detalles
- Lenguaje que incita a la acci√≥n colectiva ('no podemos quedarnos de brazos cruzados')
- Invitaciones a la participaci√≥n activa en causas

‚úÖ GENERAL - SOLO para contenido neutro:
- Conversaci√≥n cotidiana, clima, comida, entretenimiento
- Opiniones pol√≠ticas moderadas sin elementos extremistas
- Informaci√≥n factual sin sesgo problem√°tico

IMPORTANTE: Si detectas CUALQUIER elemento problem√°tico, elige la categor√≠a espec√≠fica m√°s apropiada. S√© menos conservador - prefiere categor√≠as espec√≠ficas sobre 'general'."""
    
    @staticmethod
    def build_generation_system_prompt() -> str:
        """Build enhanced generation model system prompt with improved detection guidelines."""
        categories = EnhancedPromptGenerator.build_category_list()
        return f"""You are an expert content classifier specializing in detecting problematic Spanish content. Classify text as one of: {categories}

ENHANCED DETECTION RULES:

HATE_SPEECH: Detect subtle dehumanization and generalizations
- Direct/indirect insults toward ethnic, religious, or national groups
- Derogatory generalizations ('esa gente', 'ya sab√©is c√≥mo son', 'todos los X son...')
- Subtle dehumanization (animal references, object comparisons)

DISINFORMATION: Medical/scientific false claims
- Unproven medical treatments or conspiracy theories about vaccines/5G
- Fabricated statistics or manipulated data
- False health information without scientific backing

CONSPIRACY_THEORY: Unfounded theories about secret control
- Claims about elite global manipulation or population replacement
- References to hidden agendas without verifiable sources
- Theories about coordinated secret plans

FAR_RIGHT_BIAS: Extreme political rhetoric
- Radical anti-left language ('rojos', 'comunistas')
- Exclusionary nationalism with alarmist framing ('invasi√≥n')
- Us-vs-them radicalized frameworks

CALL_TO_ACTION: Explicit mobilization calls
- Specific instructions for collective action with time/location
- Direct calls for protests, demonstrations, or gatherings

GENERAL: Truly neutral content only (weather, food, entertainment, moderate opinions)

CRITICAL: If ANY problematic element is detected, choose the most specific category rather than 'general'. Be less conservative in classification."""
    
    @staticmethod
    def build_spanish_classification_prompt(text: str) -> str:
        """Build simple Spanish classification prompt for generation models."""
        categories = EnhancedPromptGenerator.build_category_list()
        return f"""Clasifica el siguiente texto en una de estas categor√≠as: {categories}

Texto: "{text}"

Responde SOLO con el nombre de la categor√≠a m√°s apropiada:"""
    
    @staticmethod
    def build_gemini_analysis_prompt(text_content: str, is_video: bool = False) -> str:
        """
        Create the analysis prompt for Gemini multimodal analysis based on media type.
        Uses the same format structure as generate_explanation_prompt for consistency.
        
        Args:
            text_content: The text content accompanying the media
            is_video: Whether the media is a video
            
        Returns:
            Formatted analysis prompt for Gemini following standardized format
        """
        media_type = "video" if is_video else "imagen"
        
        prompt_parts = [
            f'TEXTO DEL POST ANALIZADO: "{text_content}"',
            "",
            f"AN√ÅLISIS DETALLADO - Enf√≥cate en contenido pol√≠tico problem√°tico en la {media_type} y texto:",
            "",
            "1. ¬øQu√© elementos visuales espec√≠ficos aparecen en la imagen/video que sugieren contenido pol√≠tico?",
            "2. ¬øQu√© texto o elementos gr√°ficos indican sesgo pol√≠tico, especialmente de extrema derecha?",
            "3. ¬øSe mencionan datos, estad√≠sticas o hechos espec√≠ficos? Eval√∫alos por veracidad y contexto",
            "4. ¬øC√≥mo se relacionan el contenido visual y textual para crear una narrativa pol√≠tica?",
            "5. ¬øQu√© categor√≠as problem√°ticas se detectan: hate_speech, disinformation, conspiracy_theory, far_right_bias, call_to_action?",
            "6. Si se mencionan hechos o datos, ¬øson verificables y se presentan en contexto correcto?",
            "7. ¬øC√≥mo contribuye la combinaci√≥n de imagen/video + texto a narrativas problem√°ticas?",
            "",
            "INSTRUCCIONES DE FORMATO:",
            "- Responde SOLO con texto plano en espa√±ol, sin markdown ni formato especial",
            "- NO uses negritas (**), t√≠tulos (##), listas numeradas, tablas, o s√≠mbolos",
            "- Escribe 2-3 oraciones claras y directas explicando los elementos detectados",
            "- Eval√∫a cualquier dato o hecho mencionado por su veracidad y contexto",
            "- Como si le explicaras a una persona que no conoce el tema",
            "",
            "EXPLICACI√ìN:"
        ]
        
        return "\n".join(prompt_parts)
    
    # ============================================================================
    # INSTANCE METHODS FOR SOPHISTICATED PROMPTS
    # ============================================================================

    def generate_classification_prompt(self, text: str, model_type: str = "ollama") -> str:
        """
        Generate enhanced step-by-step classification prompt for improved accuracy.
        """
        prompt_parts = [
            f'TEXTO A ANALIZAR: "{text}"',
            "",
            "PROCESO DE AN√ÅLISIS PASO A PASO:",
            "",
            "1Ô∏è‚É£ HATE_SPEECH - ¬øContiene el texto...?",
            "   ‚Ä¢ Insultos directos/indirectos hacia grupos √©tnicos, religiosos, nacionales",
            "   ‚Ä¢ Generalizaciones despectivas ('esa gente', 'ya sab√©is c√≥mo son', 'todos los X')",
            "   ‚Ä¢ Deshumanizaci√≥n sutil (comparaciones con animales/objetos)",
            "   ‚Ä¢ Lenguaje que incita hostilidad hacia grupos espec√≠ficos",
            "",
            "2Ô∏è‚É£ DISINFORMATION - ¬øPresenta...?",
            "   ‚Ä¢ Afirmaciones m√©dicas/cient√≠ficas sin evidencia (vacunas-5G, COVID falso)",
            "   ‚Ä¢ Estad√≠sticas inventadas o datos manipulados",
            "   ‚Ä¢ Claims sobre tratamientos no probados cient√≠ficamente",
            "   ‚Ä¢ ASOCIACIONES FALSAS: Conecta eventos/pa√≠ses/pol√≠ticas sin relaci√≥n real",
            "   ‚Ä¢ MARCOS DICTATORIALES: Califica democracias como 'dictaduras' sin evidencia",
            "   ‚Ä¢ MANIPULACI√ìN INTERNACIONAL: Usa noticias de otros pa√≠ses para ataques locales",
            "   ‚Ä¢ EQUIVALENCIAS FALSAS: Presenta situaciones diferentes como id√©nticas",
            "   ‚Ä¢ DESCONTEXTUALIZACI√ìN: Informaci√≥n real usada en contexto enga√±oso",
            "",
            "3Ô∏è‚É£ CONSPIRACY_THEORY - ¬øMenciona...?",
            "   ‚Ä¢ Teor√≠as sobre control secreto por √©lites (Soros, Davos, 'la agenda')",
            "   ‚Ä¢ Planes ocultos de reemplazo poblacional o cultural",
            "   ‚Ä¢ Organizaciones manipulando eventos masivamente sin fuentes",
            "",
            "4Ô∏è‚É£ FAR_RIGHT_BIAS - ¬øMuestra...?",
            "   ‚Ä¢ Ret√≥rica extrema contra izquierda ('rojos', 'comunistas')",
            "   ‚Ä¢ Nacionalismo excluyente con lenguaje alarmista ('invasi√≥n')",
            "   ‚Ä¢ Marcos 'nosotros vs ellos' radicalizados",
            "   ‚Ä¢ Anti-inmigraci√≥n con deshumanizaci√≥n",
            "",
            "5Ô∏è‚É£ CALL_TO_ACTION - ¬øIncluye...?",
            "   ‚Ä¢ Llamadas expl√≠citas a manifestaciones/protestas con lugar/hora",
            "   ‚Ä¢ Instrucciones espec√≠ficas de acci√≥n colectiva ('todos a X')",
            "   ‚Ä¢ Urgencia para movilizaci√≥n inmediata",
            "   ‚Ä¢ Llamadas a organizarse o 'hacer algo' sin especificar detalles",
            "   ‚Ä¢ Lenguaje que incita a la acci√≥n colectiva ('no podemos quedarnos de brazos cruzados')",
            "   ‚Ä¢ Invitaciones a la participaci√≥n activa en causas",
            "",
            "6Ô∏è‚É£ GENERAL - Solo si:",
            "   ‚Ä¢ Contenido completamente neutral (clima, comida, entretenimiento)",
            "   ‚Ä¢ Opiniones pol√≠ticas moderadas sin extremismo",
            "   ‚Ä¢ Informaci√≥n factual sin sesgo problem√°tico",
            "",
            "DECISI√ìN: Eval√∫a en orden 1‚Üí6. Si encuentras elementos de una categor√≠a, esa es la respuesta.",
            "Si hay m√∫ltiples categor√≠as aplicables, elige la M√ÅS ESPEC√çFICA y PROBLEM√ÅTICA.",
            "IMPORTANTE: Contenido pol√≠tico con llamadas a acci√≥n ‚Üí call_to_action (NO political_general)",
            "IMPORTANTE: Lenguaje que urge organizaci√≥n colectiva ‚Üí call_to_action",
            "",
            "RESPUESTA FINAL (una sola palabra):"
        ]
        
        return "\n".join(prompt_parts)
    
    def generate_explanation_prompt(self, text: str, category: str, model_type: str = "ollama") -> str:
        """
        Generate detailed explanation prompt with category-specific focus.
        """
        category_context = {
            Categories.HATE_SPEECH: {
                "focus": "elementos de odio, discriminaci√≥n o ataques hacia grupos espec√≠ficos",
                "questions": [
                    "¬øQu√© lenguaje espec√≠fico genera hostilidad o desprecio?",
                    "¬øHacia qu√© grupo(s) se dirige el contenido problem√°tico?",
                    "¬øC√≥mo contribuye este contenido a narrativas de exclusi√≥n?"
                ]
            },
            Categories.DISINFORMATION: {
                "focus": "afirmaciones falsas, datos manipulados, informaci√≥n m√©dica/cient√≠fica incorrecta, asociaciones falsas entre pa√≠ses/pol√≠ticas, marcos dictatoriales aplicados a democracias, y manipulaci√≥n emocional a trav√©s de equivalencias err√≥neas",
                "questions": [
                    "¬øQu√© afirmaciones espec√≠ficas son m√©dica/cient√≠ficamente incorrectas o factuales falsas?",
                    "¬øSe est√°n creando asociaciones falsas entre pol√≠ticas de diferentes pa√≠ses o contextos pol√≠ticos no relacionados?",
                    "¬øSe est√° enmarcando un sistema democr√°tico como dictatorial sin evidencia factual?",
                    "¬øSe est√°n utilizando noticias de un pa√≠s para atacar falsamente pol√≠ticos o sistemas de otro pa√≠s?",
                    "¬øQu√© equivalencias err√≥neas se establecen entre situaciones pol√≠ticas completamente diferentes?",
                    "¬øC√≥mo se manipula emocionalmente al lector a trav√©s de t√©rminos como 'dictadura' aplicados incorrectamente?",
                    "¬øQu√© evidencia contradice estas afirmaciones o asociaciones?"
                ]
            },
            Categories.CONSPIRACY_THEORY: {
                "focus": "teor√≠as sobre control secreto, planes ocultos o manipulaci√≥n masiva",
                "questions": [
                    "¬øQu√© teor√≠a conspirativa espec√≠fica se menciona?",
                    "¬øQu√© actores se presentan como controladores secretos?",
                    "¬øC√≥mo se estructura la narrativa de 'plan oculto'?"
                ]
            },
            Categories.FAR_RIGHT_BIAS: {
                "focus": "ret√≥rica extremista, nacionalismo excluyente o marcos pol√≠ticos radicales",
                "questions": [
                    "¬øQu√© elementos espec√≠ficos indican sesgo de extrema derecha?",
                    "¬øC√≥mo se manifiesta el nacionalismo o anti-inmigraci√≥n?",
                    "¬øQu√© marcos 'nosotros vs ellos' se emplean?"
                ]
            },
            Categories.CALL_TO_ACTION: {
                "focus": "llamadas espec√≠ficas a la movilizaci√≥n o acci√≥n colectiva",
                "questions": [
                    "¬øQu√© acci√≥n espec√≠fica se solicita a los seguidores?",
                    "¬øSe proporcionan detalles como lugar, hora o m√©todo?",
                    "¬øCu√°l es la urgencia o motivaci√≥n para la movilizaci√≥n?"
                ]
            },
            Categories.NATIONALISM: {
                "focus": "ret√≥rica nacionalista y exaltaci√≥n de la identidad nacional",
                "questions": [
                    "¬øQu√© s√≠mbolos o valores nacionales se exaltan?",
                    "¬øC√≥mo se presenta la identidad nacional como amenazada?",
                    "¬øQu√© elementos de nacionalismo excluyente se detectan?"
                ]
            },
            Categories.ANTI_GOVERNMENT: {
                "focus": "ret√≥rica anti-gubernamental y deslegitimizaci√≥n institucional",
                "questions": [
                    "¬øQu√© aspectos del gobierno se cuestionan como ileg√≠timos?",
                    "¬øC√≥mo se manifiesta la ret√≥rica anti-establishment?",
                    "¬øSe promueve resistencia o desobediencia institucional?"
                ]
            },
            Categories.HISTORICAL_REVISIONISM: {
                "focus": "reinterpretaci√≥n sesgada de eventos hist√≥ricos",
                "questions": [
                    "¬øQu√© eventos hist√≥ricos se reinterpretan de forma problem√°tica?",
                    "¬øSe rehabilitan figuras o reg√≠menes controvertidos?",
                    "¬øC√≥mo se usa la historia para justificar narrativas actuales?"
                ]
            },
            Categories.POLITICAL_GENERAL: {
                "focus": "contenido pol√≠tico convencional sin elementos extremistas",
                "questions": [
                    "¬øQu√© temas pol√≠ticos se tratan de forma constructiva?",
                    "¬øQu√© perspectiva pol√≠tica moderada se presenta?",
                    "¬øPor qu√© no entra en categor√≠as problem√°ticas espec√≠ficas?"
                ]
            },
            Categories.GENERAL: {
                "focus": "contenido neutral o pol√≠tico moderado sin elementos extremistas",
                "questions": [
                    "¬øPor qu√© este contenido no entra en categor√≠as problem√°ticas?",
                    "¬øQu√© lo hace neutral o moderadamente pol√≠tico?",
                    "¬øFalta contexto extremista, conspirativo o de odio?"
                ]
            }
        }
        
        context = category_context.get(category, category_context[Categories.GENERAL])
        
        prompt_parts = [
            f'TEXTO ANALIZADO: "{text}"',
            f'CATEGOR√çA DETECTADA: {category}',
            "",
            f"AN√ÅLISIS DETALLADO - Enf√≥cate en {context['focus']}:",
            ""
        ]
        
        for i, question in enumerate(context['questions'], 1):
            prompt_parts.append(f"{i}. {question}")
        
        prompt_parts.extend([
            "",
            "INSTRUCCIONES DE FORMATO:",
            "- Responde SOLO con texto plano en espa√±ol, sin markdown ni formato especial",
            "- NO uses negritas (**), t√≠tulos (##), listas numeradas, tablas, o s√≠mbolos",
            "- Escribe 2-3 oraciones claras y directas explicando los elementos detectados",
            "- Como si le explicaras a una persona que no conoce el tema",
            "",
            "EXPLICACI√ìN:"
        ])
        
        return "\n".join(prompt_parts)

