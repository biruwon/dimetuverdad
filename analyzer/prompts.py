"""
Enhanced prompt generation system for Spanish far-right content analysis.
Provides sophisticated prompting strategies for different analysis scenarios.
"""

from typing import Dict, List
from dataclasses import dataclass
from .categories import Categories, CATEGORY_INFO, get_category_info, CLASSIFICATION_PROMPT_MAPPINGS

# ============================================================================
# DYNAMIC PROMPT BUILDERS
# ============================================================================

def build_category_list_prompt() -> str:
    """Build dynamic category list for LLM prompts."""
    return ", ".join(Categories.get_all_categories())

def build_spanish_classification_prompt(text: str) -> str:
    """Build enhanced Spanish classification prompt with improved category descriptions."""
    categories = Categories.get_all_categories()
    
    # Enhanced category descriptions with specific examples
    category_descriptions = {
        Categories.HATE_SPEECH: "Insultos, generalizaciones despectivas, deshumanizaci√≥n de grupos ('moros', 'menas', 'esa gente')",
        Categories.DISINFORMATION: "Informaci√≥n m√©dica/cient√≠fica falsa (vacunas-5G, COVID inventado, curas milagrosas)",
        Categories.CONSPIRACY_THEORY: "Teor√≠as conspirativas (Soros, √©lites secretas, planes ocultos, 'la agenda')", 
        Categories.FAR_RIGHT_BIAS: "Ret√≥rica extrema derecha ('rojos', anti-woke, nacionalismo excluyente)",
        Categories.CALL_TO_ACTION: "Llamadas a movilizaci√≥n con lugar/tiempo espec√≠ficos ('Todos a Cibeles')",
        Categories.GENERAL: "Contenido neutro sin elementos problem√°ticos"
    }
    
    category_lines = []
    for category in categories:
        desc = category_descriptions.get(category, "Categor√≠a de an√°lisis")
        category_lines.append(f"‚Ä¢ {category}: {desc}")
    
    return f"""AN√ÅLISIS DE CONTENIDO PROBLEM√ÅTICO

TEXTO A CLASIFICAR: "{text}"

CATEGOR√çAS DISPONIBLES:
{chr(10).join(category_lines)}

INSTRUCCIONES:
1. Lee el texto completo cuidadosamente
2. Identifica elementos problem√°ticos sutiles o expl√≠citos  
3. Si hay m√∫ltiples categor√≠as aplicables, elige la M√ÅS ESPEC√çFICA
4. Usa 'general' SOLO si el contenido es completamente neutral
5. Prefiere categor√≠as espec√≠ficas sobre 'general'

RESPUESTA (una sola palabra):"""

def build_ollama_system_prompt() -> str:
    """Build enhanced Ollama system prompt with dynamic categories and improved detection guidelines."""
    categories = build_category_list_prompt()
    return f"""Eres un clasificador experto en contenido problem√°tico en espa√±ol. Analiza el texto con precisi√≥n y responde √öNICAMENTE con una de estas categor√≠as: {categories}

GU√çAS DE DETECCI√ìN MEJORADAS:

üö´ HATE_SPEECH - Identifica:
- Insultos directos o indirectos hacia grupos (√©tnicos, religiosos, nacionales)
- Generalizaciones despectivas ("esa gente", "ya sab√©is c√≥mo son", "todos los [grupo] son...")
- Deshumanizaci√≥n sutil (referencias a animales, objetos, amenazas)
- Lenguaje que incita hostilidad o violencia hacia grupos espec√≠ficos
- T√©rminos despectivos aunque no sean insultos obvios

‚ùå DISINFORMATION - Identifica:
- Afirmaciones m√©dicas/cient√≠ficas falsas sin evidencia
- Estad√≠sticas inventadas o manipuladas
- Teor√≠as sobre vacunas, 5G, salud sin base cient√≠fica
- Claims sobre efectividad de tratamientos no probados

üîç CONSPIRACY_THEORY - Identifica:
- Teor√≠as sobre control secreto por √©lites globales
- Planes ocultos de reemplazo poblacional o cultural
- Afirmaciones sobre manipulaci√≥n masiva por organizaciones
- Referencias a "la agenda" sin especificar fuente verificable

‚ö° FAR_RIGHT_BIAS - Identifica:
- Ret√≥rica extrema contra "rojos", "comunistas", izquierda
- Nacionalismo extremo excluyente
- Marcos interpretativos de "nosotros vs ellos" radicalizados
- Anti-inmigraci√≥n con lenguaje alarmista ("invasi√≥n")

üì¢ CALL_TO_ACTION - Identifica:
- Llamadas expl√≠citas a manifestaciones, protestas, movilizaci√≥n
- Instrucciones espec√≠ficas de acci√≥n ("todos a [lugar]", "hay que salir")
- Urgencia para actuar colectivamente

‚úÖ GENERAL - SOLO para contenido neutro:
- Conversaci√≥n cotidiana, clima, comida, entretenimiento
- Opiniones pol√≠ticas moderadas sin elementos extremistas
- Informaci√≥n factual sin sesgo problem√°tico

IMPORTANTE: Si detectas CUALQUIER elemento problem√°tico, elige la categor√≠a espec√≠fica m√°s apropiada. S√© menos conservador - prefiere categor√≠as espec√≠ficas sobre 'general'."""

def build_generation_system_prompt() -> str:
    """Build enhanced generation model system prompt with improved detection guidelines."""
    categories = build_category_list_prompt()
    return f"""You are an expert content classifier specializing in detecting problematic Spanish content. Classify text as one of: {categories}

ENHANCED DETECTION RULES:

HATE_SPEECH: Detect subtle dehumanization and generalizations
- Direct/indirect insults toward ethnic, religious, or national groups
- Derogatory generalizations ('esa gente', 'ya sab√©is c√≥mo son', 'todos los X son...')
- Subtle dehumanization (animal references, object comparisons)
- Language inciting hostility toward specific groups

DISINFORMATION: Medical/scientific false claims
- Unproven medical treatments or conspiracy theories about vaccines/5G
- Fabricated statistics or manipulated data
- False health information without scientific backing

CONSPIRACY_THEORY: Unfounded theories about secret control
- Claims about elite global manipulation or population replacement
- References to hidden agendas without verifiable sources
- Theories about coordinated secret plans

FAR_RIGHT_BIAS: Extreme political rhetoric
- Radical anti-left language ('rojos', 'comunistas')
- Exclusionary nationalism with alarmist framing ('invasi√≥n')
- Us-vs-them radicalized frameworks

CALL_TO_ACTION: Explicit mobilization calls
- Specific instructions for collective action with time/location
- Direct calls for protests, demonstrations, or gatherings

GENERAL: Truly neutral content only (weather, food, entertainment, moderate opinions)

CRITICAL: If ANY problematic element is detected, choose the most specific category rather than 'general'. Be less conservative in classification."""

@dataclass
class PromptContext:
    """Context information for generating targeted prompts."""
    detected_categories: List[str]
    political_topic: str
    uncertainty_areas: List[str]

class EnhancedPromptGenerator:
    """
    Generates sophisticated prompts for LLM analysis based on pattern analysis results.
    Focuses on areas where pattern matching shows uncertainty.
    """
    
    def __init__(self):
        self.base_context = self._initialize_spanish_context()
        self.prompt_templates = self._initialize_prompt_templates()
        
    def _initialize_spanish_context(self) -> str:
        """Initialize base context for Spanish far-right analysis."""
        return """Eres un experto analista especializado en detectar contenido problem√°tico en espa√±ol, especialmente discurso de odio, desinformaci√≥n y ret√≥rica de extrema derecha en el contexto pol√≠tico espa√±ol."""
    
    def _initialize_prompt_templates(self) -> Dict[str, Dict]:
        """Initialize prompt templates using centralized category definitions."""
        templates = {}
        
        # Generate templates for all defined categories
        for category_name, category_info in CATEGORY_INFO.items():
            templates[category_name] = {
                "system": category_info.system_prompt,
                "focus": category_info.focus_area,
                "questions": category_info.analysis_questions
            }
        
        return templates
    
    def generate_prompt(self, 
                       text: str, 
                       category: str = Categories.GENERAL,
                       context: PromptContext = None,
                       complexity_level: str = "medium",
                       model_type: str = "transformers") -> str:
        """
        Generate a sophisticated prompt based on content category and context.
        
        Args:
            text: Content to analyze
            category: Content category from Categories class
            context: Analysis context with detected patterns
            complexity_level: Prompt complexity (simple/medium/complex)
            model_type: Target model type (transformers/ollama)
        """
        # Use general template if category not found
        template = self.prompt_templates.get(category, self.prompt_templates[Categories.GENERAL])
        
        # Build context-aware prompt
        prompt_parts = [
            template["system"],
            "",
            f"CONTENIDO A ANALIZAR:",
            f'"{text}"',
            ""
        ]
        
        # Add context information to guide analysis
        if context and context.detected_categories:
            prompt_parts.extend([
                f"PATRONES DETECTADOS: {', '.join(context.detected_categories)}",
                ""
            ])
        
        if context and context.political_topic and context.political_topic != "no_pol√≠tico":
            prompt_parts.extend([
                f"CONTEXTO POL√çTICO: {context.political_topic}",
                ""
            ])
        
        # Add uncertainty-focused questions for areas needing LLM insight
        if context and context.uncertainty_areas:
            prompt_parts.extend([
                "√ÅREAS DE INCERTIDUMBRE A CLARIFICAR:",
                *[f"- {area}" for area in context.uncertainty_areas],
                ""
            ])
        
        # Add analysis instructions based on complexity
        if complexity_level == "simple":
            prompt_parts.extend([
                f"Proporciona un {template['focus']} breve y directo.",
                "Responde en 2-3 frases concisas."
            ])
        elif complexity_level == "complex":
            prompt_parts.extend([
                f"Realiza un {template['focus']} detallado respondiendo:",
                *[f"- {q}" for q in template.get("questions", [])],
                "",
                "Proporciona un an√°lisis extenso con ejemplos espec√≠ficos del texto."
            ])
        else:  # medium
            prompt_parts.extend([
                f"Analiza el contenido enfoc√°ndote en {template['focus']}.",
                "Responde de forma clara y estructurada en 4-6 frases."
            ])
        
        # Add model-specific formatting
        if model_type == "ollama":
            prompt_parts.append("\nRespuesta:")
        
        return "\n".join(prompt_parts)
    
    def generate_classification_prompt(self, text: str, model_type: str = "ollama") -> str:
        """
        Generate enhanced step-by-step classification prompt for improved accuracy.
        """
        prompt_parts = [
            f'TEXTO A ANALIZAR: "{text}"',
            "",
            "PROCESO DE AN√ÅLISIS PASO A PASO:",
            "",
            "1Ô∏è‚É£ HATE_SPEECH - ¬øContiene el texto...?",
            "   ‚Ä¢ Insultos directos/indirectos hacia grupos √©tnicos, religiosos, nacionales",
            "   ‚Ä¢ Generalizaciones despectivas ('esa gente', 'ya sab√©is c√≥mo son', 'todos los X')",
            "   ‚Ä¢ Deshumanizaci√≥n sutil (comparaciones con animales/objetos)",
            "   ‚Ä¢ Lenguaje que incita hostilidad hacia grupos espec√≠ficos",
            "",
            "2Ô∏è‚É£ DISINFORMATION - ¬øPresenta...?",
            "   ‚Ä¢ Afirmaciones m√©dicas/cient√≠ficas sin evidencia (vacunas-5G, COVID falso)",
            "   ‚Ä¢ Estad√≠sticas inventadas o datos manipulados",
            "   ‚Ä¢ Claims sobre tratamientos no probados cient√≠ficamente",
            "",
            "3Ô∏è‚É£ CONSPIRACY_THEORY - ¬øMenciona...?",
            "   ‚Ä¢ Teor√≠as sobre control secreto por √©lites (Soros, Davos, 'la agenda')",
            "   ‚Ä¢ Planes ocultos de reemplazo poblacional o cultural",
            "   ‚Ä¢ Organizaciones manipulando eventos masivamente sin fuentes",
            "",
            "4Ô∏è‚É£ FAR_RIGHT_BIAS - ¬øMuestra...?",
            "   ‚Ä¢ Ret√≥rica extrema contra izquierda ('rojos', 'comunistas')",
            "   ‚Ä¢ Nacionalismo excluyente con lenguaje alarmista ('invasi√≥n')",
            "   ‚Ä¢ Marcos 'nosotros vs ellos' radicalizados",
            "   ‚Ä¢ Anti-inmigraci√≥n con deshumanizaci√≥n",
            "",
            "5Ô∏è‚É£ CALL_TO_ACTION - ¬øIncluye...?",
            "   ‚Ä¢ Llamadas expl√≠citas a manifestaciones/protestas con lugar/hora",
            "   ‚Ä¢ Instrucciones espec√≠ficas de acci√≥n colectiva ('todos a X')",
            "   ‚Ä¢ Urgencia para movilizaci√≥n inmediata",
            "",
            "6Ô∏è‚É£ GENERAL - Solo si:",
            "   ‚Ä¢ Contenido completamente neutral (clima, comida, entretenimiento)",
            "   ‚Ä¢ Opiniones pol√≠ticas moderadas sin extremismo",
            "   ‚Ä¢ Informaci√≥n factual sin sesgo problem√°tico",
            "",
            "DECISI√ìN: Eval√∫a en orden 1‚Üí6. Si encuentras elementos de una categor√≠a, esa es la respuesta.",
            "Si hay m√∫ltiples categor√≠as aplicables, elige la M√ÅS ESPEC√çFICA y PROBLEM√ÅTICA.",
            "",
            "RESPUESTA FINAL (una sola palabra):"
        ]
        
        return "\n".join(prompt_parts)
    
    def generate_explanation_prompt(self, text: str, category: str, model_type: str = "ollama") -> str:
        """
        Generate detailed explanation prompt with category-specific focus.
        """
        category_context = {
            Categories.HATE_SPEECH: {
                "focus": "elementos de odio, discriminaci√≥n o ataques hacia grupos espec√≠ficos",
                "questions": [
                    "¬øQu√© lenguaje espec√≠fico genera hostilidad o desprecio?",
                    "¬øHacia qu√© grupo(s) se dirige el contenido problem√°tico?",
                    "¬øC√≥mo contribuye este contenido a narrativas de exclusi√≥n?"
                ]
            },
            Categories.DISINFORMATION: {
                "focus": "afirmaciones falsas, datos manipulados o informaci√≥n m√©dica/cient√≠fica incorrecta",
                "questions": [
                    "¬øQu√© claims espec√≠ficos son m√©dica/cient√≠ficamente incorrectos?",
                    "¬øQu√© evidencia contradice estas afirmaciones?",
                    "¬øC√≥mo podr√≠a este contenido desinformar a la audiencia?"
                ]
            },
            Categories.CONSPIRACY_THEORY: {
                "focus": "teor√≠as sobre control secreto, planes ocultos o manipulaci√≥n masiva",
                "questions": [
                    "¬øQu√© teor√≠a conspirativa espec√≠fica se menciona?",
                    "¬øQu√© actores se presentan como controladores secretos?",
                    "¬øC√≥mo se estructura la narrativa de 'plan oculto'?"
                ]
            },
            Categories.FAR_RIGHT_BIAS: {
                "focus": "ret√≥rica extremista, nacionalismo excluyente o marcos pol√≠ticos radicales",
                "questions": [
                    "¬øQu√© elementos espec√≠ficos indican sesgo de extrema derecha?",
                    "¬øC√≥mo se manifiesta el nacionalismo o anti-inmigraci√≥n?",
                    "¬øQu√© marcos 'nosotros vs ellos' se emplean?"
                ]
            },
            Categories.CALL_TO_ACTION: {
                "focus": "llamadas espec√≠ficas a la movilizaci√≥n o acci√≥n colectiva",
                "questions": [
                    "¬øQu√© acci√≥n espec√≠fica se solicita a los seguidores?",
                    "¬øSe proporcionan detalles como lugar, hora o m√©todo?",
                    "¬øCu√°l es la urgencia o motivaci√≥n para la movilizaci√≥n?"
                ]
            },
            Categories.NATIONALISM: {
                "focus": "ret√≥rica nacionalista y exaltaci√≥n de la identidad nacional",
                "questions": [
                    "¬øQu√© s√≠mbolos o valores nacionales se exaltan?",
                    "¬øC√≥mo se presenta la identidad nacional como amenazada?",
                    "¬øQu√© elementos de nacionalismo excluyente se detectan?"
                ]
            },
            Categories.ANTI_GOVERNMENT: {
                "focus": "ret√≥rica anti-gubernamental y deslegitimizaci√≥n institucional",
                "questions": [
                    "¬øQu√© aspectos del gobierno se cuestionan como ileg√≠timos?",
                    "¬øC√≥mo se manifiesta la ret√≥rica anti-establishment?",
                    "¬øSe promueve resistencia o desobediencia institucional?"
                ]
            },
            Categories.HISTORICAL_REVISIONISM: {
                "focus": "reinterpretaci√≥n sesgada de eventos hist√≥ricos",
                "questions": [
                    "¬øQu√© eventos hist√≥ricos se reinterpretan de forma problem√°tica?",
                    "¬øSe rehabilitan figuras o reg√≠menes controvertidos?",
                    "¬øC√≥mo se usa la historia para justificar narrativas actuales?"
                ]
            },
            Categories.POLITICAL_GENERAL: {
                "focus": "contenido pol√≠tico convencional sin elementos extremistas",
                "questions": [
                    "¬øQu√© temas pol√≠ticos se tratan de forma constructiva?",
                    "¬øQu√© perspectiva pol√≠tica moderada se presenta?",
                    "¬øPor qu√© no entra en categor√≠as problem√°ticas espec√≠ficas?"
                ]
            },
            Categories.GENERAL: {
                "focus": "contenido neutral o pol√≠tico moderado sin elementos extremistas",
                "questions": [
                    "¬øPor qu√© este contenido no entra en categor√≠as problem√°ticas?",
                    "¬øQu√© lo hace neutral o moderadamente pol√≠tico?",
                    "¬øFalta contexto extremista, conspirativo o de odio?"
                ]
            }
        }
        
        context = category_context.get(category, category_context[Categories.GENERAL])
        
        prompt_parts = [
            f'TEXTO ANALIZADO: "{text}"',
            f'CATEGOR√çA DETECTADA: {category}',
            "",
            f"AN√ÅLISIS DETALLADO - Enf√≥cate en {context['focus']}:",
            ""
        ]
        
        for i, question in enumerate(context['questions'], 1):
            prompt_parts.append(f"{i}. {question}")
        
        prompt_parts.extend([
            "",
            "EXPLICACI√ìN (2-3 oraciones claras y espec√≠ficas sobre los elementos detectados):"
        ])
        
        return "\n".join(prompt_parts)

def create_context_from_analysis(analysis_results: Dict) -> PromptContext:
    """
    Create prompt context from analysis results.
    Used by LLM pipeline for backwards compatibility.
    """
    # Handle different context formats
    detected_categories = []
    
    # Check for detected_categories from enhanced analyzer
    if 'detected_categories' in analysis_results:
        detected_categories = analysis_results['detected_categories']
    # Check for categories from pattern analysis
    elif 'categories' in analysis_results:
        detected_categories = analysis_results['categories']
    # Fall back to single category
    elif 'detected_category' in analysis_results:
        detected_categories = [analysis_results['detected_category']]
    
    # Get political topic
    political_topic = analysis_results.get('category', analysis_results.get('detected_category', 'general'))
    
    # Get uncertainty areas
    uncertainty_areas = analysis_results.get('uncertainty_areas', [])
    
    return PromptContext(
        detected_categories=detected_categories,
        political_topic=political_topic,
        uncertainty_areas=uncertainty_areas
    )

# Test function
if __name__ == "__main__":
    generator = EnhancedPromptGenerator()
    
    # Test context using centralized categories
    test_context = PromptContext(
        detected_categories=[Categories.HATE_SPEECH, Categories.FAR_RIGHT_BIAS],
        political_topic='inmigraci√≥n',
        uncertainty_areas=['Nivel de amenaza real', 'Intenci√≥n del autor']
    )
    
    test_text = "Los musulmanes est√°n invadiendo Espa√±a y hay que pararlos ya"
    
    # Test all content categories using centralized definitions
    test_categories = Categories.get_all_categories()
    
    for category in test_categories:
        print(f"\n=== {category.upper()} ===")
        prompt = generator.generate_prompt(test_text, category, test_context)
        print(prompt[:200] + "..." if len(prompt) > 200 else prompt)
