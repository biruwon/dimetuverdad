"""
Enhanced prompting system for LLM analysis of far-right activism content.
Specialized prompts for different types of analysis and content.
"""

import json
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from enum import Enum

class AnalysisType(Enum):
    BIAS_DETECTION = "bias_detection"
    MISINFORMATION = "misinformation"
    THREAT_ASSESSMENT = "threat_assessment"
    CLAIM_VERIFICATION = "claim_verification"
    MOBILIZATION = "mobilization"
    COMPREHENSIVE = "comprehensive"

@dataclass
class PromptContext:
    """Context information for generating appropriate prompts."""
    content_type: str
    far_right_score: float
    threat_level: str
    detected_topics: List[str]
    claims_detected: List[Dict]
    pattern_matches: List[Dict]
    targeted_groups: List[str]

class EnhancedPromptGenerator:
    """
    Generates sophisticated prompts for LLM analysis of Spanish far-right content.
    Adapts prompts based on detected patterns and analysis context.
    """
    
    def __init__(self):
        self.base_instructions = self._get_base_instructions()
        self.context_templates = self._get_context_templates()
        self.output_schemas = self._get_output_schemas()
        
    def _get_base_instructions(self) -> str:
        """Core instructions for all LLM analysis."""
        return """
CONTEXTO: Eres un experto analista especializado en detectar activismo de extrema derecha en redes sociales espa√±olas. Tu funci√≥n es analizar contenido en busca de:
- Desinformaci√≥n y teor√≠as conspiratorias (especialmente anti-inmigraci√≥n, anti-globalizaci√≥n)
- Incitaci√≥n al odio y amenazas contra minor√≠as, inmigrantes, pol√≠ticos
- Ret√≥rica nacionalista extrema, nostalgia franquista o fascista
- Llamadas a la movilizaci√≥n o acci√≥n (manifestaciones, boicots, "resistencia")
- Sesgos pol√≠ticos y manipulaci√≥n emocional (miedo, ira, victimizaci√≥n)

PATRONES ESPEC√çFICOS ESPA√ëOLES A DETECTAR:
- Referencias a "invasi√≥n migratoria" o "gran reemplazo"
- Ataques a "√©lite globalista", "agenda 2030", "nuevo orden mundial"
- Nostalgia del franquismo o referencias positivas a la dictadura
- Ataques sistem√°ticos contra feminismo, LGTBI+, "ideolog√≠a de g√©nero"
- Teor√≠as conspirativas sobre COVID-19, vacunas, "dictadura sanitaria"
- Lenguaje sobre "Espa√±a primero", "reconquista", "despertar nacional"
- Deslegitimaci√≥n de instituciones democr√°ticas y medios "mainstream"

DIRECTRICES CR√çTICAS:
1. Responde EXCLUSIVAMENTE en espa√±ol
2. Mant√©n objetividad y base el an√°lisis en evidencia textual espec√≠fica
3. Distingue entre opini√≥n pol√≠tica leg√≠tima y extremismo peligroso
4. Identifica t√©cnicas de manipulaci√≥n y propaganda espec√≠ficas
5. Eval√∫a el potencial de da√±o social, radicalizaci√≥n y violencia real
6. Considera el contexto pol√≠tico y social actual de Espa√±a

PROHIBIDO:
- Inventar enlaces o citar fuentes externas
- Traducir el texto original
- Hacer juicios morales subjetivos sin base emp√≠rica
- Ignorar el contexto espa√±ol espec√≠fico y actual
- Confundir conservadurismo leg√≠timo con extremismo
"""
    
    def _get_context_templates(self) -> Dict[str, str]:
        """Context templates for different scenarios."""
        return {
            'high_threat': """
üö® ALERTA DE ALTO RIESGO: Este contenido ha sido identificado con nivel de amenaza {threat_level} y puntuaci√≥n de extrema derecha {score:.3f}.
Patrones detectados: {patterns}
Grupos objetivo: {groups}

Presta especial atenci√≥n a:
- Amenazas expl√≠citas o impl√≠citas de violencia f√≠sica
- Llamadas a la acci√≥n inmediata con urgencia temporal
- Deshumanizaci√≥n de grupos espec√≠ficos (inmigrantes, pol√≠ticos, minor√≠as)
- Referencias hist√≥ricas fascistas, nazis o franquistas
- Lenguaje de "guerra" o "invasi√≥n" que justifique violencia
- Identificaci√≥n de objetivos espec√≠ficos (personas, lugares, instituciones)
""",
            
            'conspiracy_focused': """
üîç AN√ÅLISIS DE CONSPIRACIONES: Se han detectado teor√≠as conspiratorias en el contenido.
Temas identificados: {topics}
Afirmaciones detectadas: {claims}

Eval√∫a espec√≠ficamente:
- Veracidad factual de las afirmaciones conspiratorias
- T√©cnicas de desinformaci√≥n empleadas (datos manipulados, fuentes falsas)
- Potencial de radicalizaci√≥n progresiva hacia extremismo
- Conexiones con narrativas extremistas conocidas (gran reemplazo, QAnon, etc.)
- Grado de paranoia y teor√≠as sin evidencia emp√≠rica
- Referencias a "√©lites ocultas" o "planes secretos"
""",
            
            'mobilization_detected': """
üì¢ POTENCIAL MOVILIZACI√ìN: Se han detectado posibles llamadas a la acci√≥n.
Contexto: {context}

Analiza cuidadosamente:
- Urgencia y especificidad temporal de las llamadas ("este domingo", "ya", "ahora")
- Canales de movilizaci√≥n sugeridos (redes, grupos, ubicaciones f√≠sicas)
- Objetivos espec√≠ficos de la acci√≥n propuesta (manifestaciones, boicots, "resistencia")
- Riesgo de escalada a violencia o confrontaci√≥n
- Tono emocional y t√©cnicas de manipulaci√≥n para motivar acci√≥n
- Referencias a "leg√≠tima defensa" o justificaciones de violencia
""",
            
            'claims_verification': """
‚úÖ VERIFICACI√ìN DE AFIRMACIONES: Se han detectado {claim_count} afirmaciones verificables.
Afirmaciones principales: {main_claims}

Eval√∫a para cada afirmaci√≥n:
- Verificabilidad con fuentes oficiales espa√±olas e internacionales
- Contexto completo y posible manipulaci√≥n de datos reales
- Intenci√≥n desinformativa vs. error involuntario
- Impacto potencial en la opini√≥n p√∫blica espa√±ola
- Conexi√≥n con narrativas m√°s amplias de extrema derecha
- Urgencia de desmentir o contextualizar la informaci√≥n
""",
            
            'spanish_context': """
üá™üá∏ CONTEXTO ESPA√ëOL ESPEC√çFICO:
Considera especialmente:
- Historia reciente: transici√≥n democr√°tica, memoria hist√≥rica, franquismo
- Tensiones actuales: inmigraci√≥n, nacionalismos territoriales, crisis econ√≥micas
- Partidos y movimientos: VOX, Espa√±a 2000, Hogar Social, grupos neonazis
- Eventos recientes: manifestaciones, atentados, crisis pol√≠ticas
- Medios y redes: desinformaci√≥n en espa√±ol, canales de Telegram, influencers
- Legislaci√≥n: leyes contra discurso de odio, memoria hist√≥rica, libertad de expresi√≥n
"""
        }
    
    def _get_output_schemas(self) -> Dict[str, Dict]:
        """JSON schemas for different analysis types."""
        return {
            AnalysisType.COMPREHENSIVE: {
                "schema": {
                    "sesgo_politico": "str: 'extrema_izquierda' | 'izquierda' | 'centro_izquierda' | 'centro' | 'centro_derecha' | 'derecha' | 'extrema_derecha' | 'indefinido'",
                    "confianza_sesgo": "float: 0.0-1.0",
                    "nivel_amenaza": "str: 'critico' | 'alto' | 'medio' | 'bajo' | 'minimo'",
                    "riesgo_desinformacion": "str: 'critico' | 'alto' | 'medio' | 'bajo' | 'minimo'",
                    "tecnicas_manipulacion": "list[str]: t√©cnicas de propaganda/manipulaci√≥n detectadas",
                    "grupos_objetivo": "list[str]: grupos espec√≠ficos atacados o mencionados",
                    "llamadas_accion": {
                        "presentes": "bool",
                        "tipo": "str: tipo de acci√≥n solicitada",
                        "urgencia": "str: 'inmediata' | 'corto_plazo' | 'largo_plazo'",
                        "especificidad": "str: 'muy_especifica' | 'especifica' | 'general' | 'vaga'"
                    },
                    "verificacion_afirmaciones": "list[dict]: an√°lisis de afirmaciones verificables",
                    "indicadores_extremismo": "list[str]: indicadores espec√≠ficos de extremismo detectados",
                    "potencial_viralizacion": "str: 'alto' | 'medio' | 'bajo'",
                    "contexto_historico": "str: referencias hist√≥ricas o contextuales relevantes",
                    "recomendaciones": {
                        "accion_inmediata": "str: acci√≥n recomendada",
                        "monitorizacion": "bool: requiere seguimiento",
                        "fact_checking": "str: prioridad de verificaci√≥n"
                    },
                    "explicacion": "str: explicaci√≥n detallada del an√°lisis"
                }
            },
            
            AnalysisType.THREAT_ASSESSMENT: {
                "schema": {
                    "nivel_amenaza": "str: 'critico' | 'alto' | 'medio' | 'bajo'",
                    "tipo_amenaza": "list[str]: tipos de amenaza detectados",
                    "inmediatez": "str: 'inmediata' | 'corto_plazo' | 'medio_plazo' | 'largo_plazo'",
                    "objetivos_amenaza": "list[str]: objetivos o blancos de las amenazas",
                    "escalada_potencial": "bool: potencial de escalada a violencia",
                    "acciones_especificas": "list[str]: acciones espec√≠ficas mencionadas",
                    "contexto_amenaza": "str: contexto que amplifica la amenaza",
                    "mitigacion_urgente": "bool: requiere acci√≥n inmediata",
                    "explicacion": "str: justificaci√≥n detallada"
                }
            },
            
            AnalysisType.MISINFORMATION: {
                "schema": {
                    "es_desinformacion": "bool",
                    "nivel_confianza": "float: 0.0-1.0",
                    "tipos_desinformacion": "list[str]: tipos espec√≠ficos detectados",
                    "afirmaciones_falsas": "list[dict]: afirmaciones espec√≠ficamente falsas",
                    "tecnicas_empleadas": "list[str]: t√©cnicas de desinformaci√≥n usadas",
                    "fuentes_citadas": "list[str]: fuentes mencionadas o implicadas",
                    "verificabilidad": "str: 'alta' | 'media' | 'baja' | 'nula'",
                    "impacto_potencial": "str: 'alto' | 'medio' | 'bajo'",
                    "narrativas_conectadas": "list[str]: narrativas m√°s amplias relacionadas",
                    "recomendacion_verificacion": "str: estrategia de verificaci√≥n recomendada",
                    "explicacion": "str: an√°lisis detallado"
                }
            }
        }
    
    def generate_prompt(self, 
                       text: str, 
                       analysis_type: AnalysisType,
                       context: Optional[PromptContext] = None,
                       complexity_level: str = "full") -> str:
        """
        Generate a prompt based on the analysis type, context, and model complexity level.
        
        Args:
            text: Text to analyze
            analysis_type: Type of analysis to perform
            context: Optional context from prior analysis
            complexity_level: "simple", "medium", or "full" - adapts prompt to model capabilities
        """
        if complexity_level == "simple":
            return self._generate_simple_prompt(text, analysis_type)
        elif complexity_level == "medium":
            return self._generate_medium_prompt(text, analysis_type, context)
        else:
            return self._generate_full_prompt(text, analysis_type, context)
    
    def _generate_simple_prompt(self, text: str, analysis_type: AnalysisType) -> str:
        """Generate a simplified prompt for smaller models using example-based approach."""
        
        if analysis_type == AnalysisType.THREAT_ASSESSMENT:
            return f"""Ejemplo: "Vamos a por vosotros ma√±ana"
An√°lisis: Este texto contiene amenazas directas e inmediatas de violencia.
Nivel: alto

Texto: "{text}"
An√°lisis:"""
        
        elif analysis_type == AnalysisType.MISINFORMATION:
            return f"""Ejemplo: "Las vacunas contienen chips de control mental"
An√°lisis: Este texto propaga teor√≠as conspirativas sin evidencia cient√≠fica.
Tipo: desinformaci√≥n

Texto: "{text}"
An√°lisis:"""
        
        else:  # COMPREHENSIVE
            return f"""Ejemplo: "Los inmigrantes nos roban el trabajo y son criminales"
An√°lisis: Este texto promueve xenofobia y estereotipos negativos infundados contra inmigrantes.
Categor√≠a: discurso de odio
Nivel: alto

Texto: "{text}"
An√°lisis:"""
    
    def _generate_medium_prompt(self, text: str, analysis_type: AnalysisType, context: Optional[PromptContext] = None) -> str:
        """Generate a medium complexity prompt for mid-tier models."""
        
        base_instructions = """
CONTEXTO: Eres un experto analista especializado en detectar activismo de extrema derecha en redes sociales espa√±olas.

DETECTA ESPEC√çFICAMENTE:
- Desinformaci√≥n y teor√≠as conspiratorias (anti-inmigraci√≥n, anti-globalizaci√≥n)
- Incitaci√≥n al odio contra minor√≠as, inmigrantes, pol√≠ticos
- Ret√≥rica nacionalista extrema o nostalgia franquista
- Llamadas a la movilizaci√≥n o acci√≥n
- Sesgos pol√≠ticos y manipulaci√≥n emocional

MANT√âN OBJETIVIDAD:
- Base el an√°lisis en evidencia textual espec√≠fica
- Distingue entre opini√≥n pol√≠tica leg√≠tima y extremismo
- Considera el contexto pol√≠tico espa√±ol actual
"""
        
        # Add simplified context if available
        context_section = ""
        if context and context.far_right_score > 0.5:
            context_section = f"\n‚ö†Ô∏è CONTEXTO: Contenido con puntuaci√≥n de extrema derecha {context.far_right_score:.2f}"
        
        # Get simplified analysis instructions
        analysis_instructions = self._get_medium_analysis_instructions(analysis_type)
        
        # Get simplified output format
        output_format = self._get_medium_output_format(analysis_type)
        
        return f"""{base_instructions}{context_section}

{analysis_instructions}

{output_format}

TEXTO A ANALIZAR:
"{text}"

RESPUESTA (JSON v√°lido √∫nicamente):"""
    
    def _generate_full_prompt(self, text: str, analysis_type: AnalysisType, context: Optional[PromptContext] = None) -> str:
        """Generate the full sophisticated prompt for advanced models."""
        # This is the original implementation
        # Start with base instructions
        prompt_parts = [self.base_instructions]
        
        # Add contextual information if available
        if context:
            prompt_parts.append(self._generate_context_section(context, analysis_type))
        
        # Add specific instructions for analysis type
        prompt_parts.append(self._get_analysis_instructions(analysis_type))
        
        # Add output format specification
        prompt_parts.append(self._get_output_format(analysis_type))
        
        # Add the text to analyze
        prompt_parts.append(f'\n\nTEXTO A ANALIZAR:\n"""{text}"""\n')
        
        # Add final response instruction
        prompt_parts.append("RESPUESTA (JSON v√°lido √∫nicamente):")
        
        return "\n".join(prompt_parts)
    
    def _get_medium_analysis_instructions(self, analysis_type: AnalysisType) -> str:
        """Get medium complexity analysis instructions."""
        instructions = {
            AnalysisType.COMPREHENSIVE: """
üéØ AN√ÅLISIS INTEGRAL: Eval√∫a sistem√°ticamente:

1. SESGO POL√çTICO: Identifica posicionamiento en el espectro pol√≠tico espa√±ol
2. AMENAZAS: Detecta amenazas directas/indirectas contra personas o grupos
3. DESINFORMACI√ìN: Verifica afirmaciones y detecta teor√≠as conspirativas
4. MOVILIZACI√ìN: Identifica llamadas a manifestaciones, boicots, acciones
5. IMPACTO SOCIAL: Eval√∫a potencial de incitar odio o radicalizaci√≥n

Considera el contexto pol√≠tico espa√±ol actual y las tensiones sociales.
""",
            
            AnalysisType.THREAT_ASSESSMENT: """
üö® EVALUACI√ìN DE AMENAZAS: Analiza:

1. TIPOLOG√çA: Directa, indirecta, condicional o impl√≠cita
2. TEMPORALIDAD: Inmediata, corto plazo, medio/largo plazo
3. ESPECIFICIDAD: Personas, lugares, grupos, m√©todos mencionados
4. ESCALADA: Potencial de amplificaci√≥n y violencia real
5. CONTEXTO ESPA√ëOL: Marco legal y antecedentes hist√≥ricos

Prioriza amenazas espec√≠ficas, temporales y contra objetivos identificables.
""",
            
            AnalysisType.MISINFORMATION: """
üîç AN√ÅLISIS DE DESINFORMACI√ìN: Examina:

1. VERIFICACI√ìN: Contrasta con fuentes oficiales espa√±olas
2. T√âCNICAS: Identifica manipulaci√≥n de datos y t√©cnicas de propaganda
3. FUENTES: Eval√∫a credibilidad de referencias citadas
4. INTENCIONALIDAD: Desinformaci√≥n deliberada vs. error honesto
5. IMPACTO ESPA√ëOL: Efecto en tensiones sociales y procesos democr√°ticos

Enf√≥cate en desinformaci√≥n que alimente extremismo de derecha.
"""
        }
        
        return instructions.get(analysis_type, instructions[AnalysisType.COMPREHENSIVE])
    
    def _get_medium_output_format(self, analysis_type: AnalysisType) -> str:
        """Get medium complexity output format."""
        if analysis_type == AnalysisType.THREAT_ASSESSMENT:
            schema = {
                "nivel_amenaza": "critico|alto|medio|bajo",
                "tipo_amenaza": ["lista de tipos detectados"],
                "inmediatez": "inmediata|corto_plazo|medio_plazo|largo_plazo",
                "objetivos_amenaza": ["objetivos o blancos identificados"],
                "explicacion": "justificaci√≥n detallada"
            }
        elif analysis_type == AnalysisType.MISINFORMATION:
            schema = {
                "es_desinformacion": "true|false",
                "nivel_confianza": "0.0-1.0",
                "tipos_desinformacion": ["tipos espec√≠ficos detectados"],
                "tecnicas_empleadas": ["t√©cnicas de desinformaci√≥n"],
                "explicacion": "an√°lisis detallado"
            }
        else:  # COMPREHENSIVE
            schema = {
                "sesgo_politico": "extrema_izquierda|izquierda|centro|derecha|extrema_derecha|indefinido",
                "nivel_amenaza": "critico|alto|medio|bajo",
                "tecnicas_manipulacion": ["t√©cnicas detectadas"],
                "grupos_objetivo": ["grupos atacados"],
                "llamadas_accion": {
                    "presentes": "true|false",
                    "tipo": "tipo de acci√≥n solicitada",
                    "urgencia": "inmediata|corto_plazo|largo_plazo"
                },
                "explicacion": "explicaci√≥n detallada del an√°lisis"
            }
        
        return f"""
FORMATO DE RESPUESTA:
Responde con un objeto JSON v√°lido:

{json.dumps(schema, indent=2, ensure_ascii=False)}

REQUISITOS:
- JSON v√°lido sin comentarios
- Explicaciones claras en espa√±ol
- M√°ximo 100 palabras por explicaci√≥n
"""
    
    def _generate_context_section(self, context: PromptContext, analysis_type: AnalysisType) -> str:
        """Generate contextual information section."""
        context_info = []
        
        if context.far_right_score > 0.5:
            template = self.context_templates['high_threat']
            patterns_text = ", ".join([p.get('category', 'unknown') for p in context.pattern_matches[:5]])
            groups_text = ", ".join(context.targeted_groups[:3])
            
            context_info.append(template.format(
                threat_level=context.threat_level,
                score=context.far_right_score,
                patterns=patterns_text or "Varios patrones detectados",
                groups=groups_text or "M√∫ltiples grupos"
            ))
        
        if 'conspiraci√≥n' in context.detected_topics:
            template = self.context_templates['conspiracy_focused']
            topics_text = ", ".join(context.detected_topics[:3])
            claims_text = f"{len(context.claims_detected)} afirmaciones"
            
            context_info.append(template.format(
                topics=topics_text,
                claims=claims_text
            ))
        
        if context.claims_detected:
            template = self.context_templates['claims_verification']
            main_claims = [claim.get('text', '')[:100] for claim in context.claims_detected[:3]]
            
            context_info.append(template.format(
                claim_count=len(context.claims_detected),
                main_claims="; ".join(main_claims)
            ))
        
        return "\n".join(context_info)
    
    def _get_analysis_instructions(self, analysis_type: AnalysisType) -> str:
        """Get specific instructions for each analysis type."""
        instructions = {
            AnalysisType.COMPREHENSIVE: """
üéØ AN√ÅLISIS INTEGRAL REQUERIDO. Eval√∫a sistem√°ticamente todos los aspectos:

1. SESGO POL√çTICO ESPEC√çFICO:
   - Identifica posicionamiento en el espectro pol√≠tico espa√±ol
   - Detecta extremismo vs. conservadurismo leg√≠timo
   - Eval√∫a referencias a partidos, ideolog√≠as, l√≠deres

2. AMENAZAS Y VIOLENCIA:
   - Amenazas directas/indirectas contra personas o grupos
   - Justificaci√≥n o glorificaci√≥n de violencia hist√≥rica
   - Llamadas a "resistencia armada" o "leg√≠tima defensa"

3. DESINFORMACI√ìN Y CONSPIRACIONES:
   - Veracidad factual de afirmaciones espec√≠ficas
   - Teor√≠as conspirativas (gran reemplazo, agenda globalista, etc.)
   - Manipulaci√≥n de datos o estad√≠sticas

4. MOVILIZACI√ìN Y ACCI√ìN:
   - Llamadas espec√≠ficas a manifestaciones, boicots, acciones
   - Coordinaci√≥n de actividades grupales
   - Urgencia temporal y especificidad geogr√°fica

5. IMPACTO SOCIAL Y RADICALIZACI√ìN:
   - Potencial de incitar odio hacia grupos espec√≠ficos
   - Capacidad de viralizaci√≥n y amplificaci√≥n
   - Riesgo de normalizaci√≥n de extremismo

6. CONTEXTO HIST√ìRICO ESPA√ëOL:
   - Referencias al franquismo, Guerra Civil, transici√≥n
   - Nostalgia autoritaria o fascista
   - Reinterpretaci√≥n hist√≥rica sesgada

Considera especialmente el contexto pol√≠tico espa√±ol actual, tensiones migratorias, crisis econ√≥micas y polarizaci√≥n social.
""",
            
            AnalysisType.THREAT_ASSESSMENT: """
üö® EVALUACI√ìN PRIORITARIA DE AMENAZAS. Analiza sistem√°ticamente:

1. TIPOLOG√çA DE AMENAZA ESPEC√çFICA:
   - Directa: "Vamos a por ti", "Te vamos a encontrar"
   - Indirecta: "Alguien deber√≠a hacer algo", "Se lo merecen"
   - Condicional: "Si siguen as√≠...", "Cuando llegue el momento"
   - Impl√≠cita: Referencias hist√≥ricas violentas, c√≥digos

2. EVALUACI√ìN TEMPORAL:
   - Inmediata: referencias temporales espec√≠ficas (fechas, eventos)
   - Corto plazo: "pronto", "ya viene", "se acerca"
   - Medio/largo plazo: profec√≠as, preparaci√≥n gradual

3. ESPECIFICIDAD Y OBJETIVOS:
   - Personas identificables (nombres, cargos, descripci√≥n)
   - Lugares espec√≠ficos (direcciones, instituciones, eventos)
   - Grupos amplios (inmigrantes, pol√≠ticos, colectivos)
   - M√©todos sugeridos (armas, t√°cticas, estrategias)

4. POTENCIAL DE ESCALADA:
   - Historial de violencia en contextos similares
   - Capacidad organizativa del emisor
   - Resonancia en comunidades extremistas
   - Legitimaci√≥n progresiva de violencia

5. FACTORES CONTEXTUALES ESPA√ëOLES:
   - Marco legal: delitos de odio, amenazas, apolog√≠a
   - Antecedentes: atentados, violencia pol√≠tica, casos judiciales
   - Clima social: tensiones actuales, eventos desencadenantes

PRIORIZA amenazas con elementos espec√≠ficos, temporales y contra objetivos identificables.
""",
            
            AnalysisType.MISINFORMATION: """
üîç AN√ÅLISIS ESPECIALIZADO DE DESINFORMACI√ìN. Examina meticulosamente:

1. VERIFICACI√ìN FACTUAL RIGUROSA:
   - Contrasta afirmaciones con fuentes oficiales espa√±olas
   - Identifica datos estad√≠sticos manipulados o descontextualizados
   - Detecta fotograf√≠as, v√≠deos o citas falsas/manipuladas
   - Eval√∫a credibilidad de fuentes citadas

2. T√âCNICAS DE MANIPULACI√ìN IDENTIFICADAS:
   - Cherry-picking: selecci√≥n sesgada de datos
   - Correlaci√≥n falsa: "despu√©s de esto, por esto"
   - Generalizaci√≥n abusiva: casos aislados como norma
   - Whataboutism: deflecci√≥n hacia otros temas
   - Strawman: distorsi√≥n de posiciones contrarias

3. AN√ÅLISIS DE FUENTES:
   - Medios pseudocient√≠ficos o conspiratorios
   - Cuentas an√≥nimas o bots como "evidencia"
   - Autoridades falsas: "expertos" no cualificados
   - C√≠rculos de retroalimentaci√≥n: fuentes circulares

4. EVALUACI√ìN DE INTENCIONALIDAD:
   - Desinformaci√≥n deliberada vs. error honesto
   - Patrones repetitivos de falsedades
   - Beneficiarios pol√≠ticos de la narrativa falsa
   - Timing estrat√©gico (elecciones, crisis, eventos)

5. IMPACTO EN CONTEXTO ESPA√ëOL:
   - Efecto en tensiones migratorias o territoriales
   - Influencia en procesos democr√°ticos
   - Da√±o a cohesi√≥n social o institucional
   - Amplificaci√≥n de prejuicios existentes

6. CONEXIONES CON NARRATIVAS EXTREMISTAS:
   - Gran reemplazo y teor√≠as racistas
   - Antisemitismo y teor√≠as globalistas
   - COVID-19 y conspiraciones sanitarias
   - Negacionismo hist√≥rico o revisionismo

Enf√≥cate en desinformaci√≥n que espec√≠ficamente alimente extremismo de derecha en Espa√±a.
""",
            
            AnalysisType.CLAIM_VERIFICATION: """
‚úÖ VERIFICACI√ìN SISTEM√ÅTICA DE AFIRMACIONES. Para cada afirmaci√≥n detectada:

1. IDENTIFICACI√ìN Y EXTRACCI√ìN:
   - Separa hechos verificables de opiniones
   - Identifica afirmaciones estad√≠sticas, hist√≥ricas, cient√≠ficas
   - Detecta predicciones o pron√≥sticos presentados como hechos
   - Localiza citas atribuidas a personas o instituciones

2. CATEGORIZACI√ìN ESPEC√çFICA:
   - Estad√≠sticas: cifras de inmigraci√≥n, criminalidad, econom√≠a
   - Hist√≥ricas: eventos del pasado, datos del franquismo, transici√≥n
   - Cient√≠ficas: salud, clima, tecnolog√≠a, estudios m√©dicos
   - Pol√≠ticas: declaraciones, programas, decisiones gubernamentales
   - Legales: leyes, procedimientos, casos judiciales

3. EVALUACI√ìN DE VERIFICABILIDAD:
   - Alta: datos de INE, BOE, instituciones oficiales
   - Media: estudios acad√©micos, organismos internacionales
   - Baja: encuestas privadas, medios no contrastados
   - Nula: rumores, testimonios an√≥nimos, "fuentes reservadas"

4. AN√ÅLISIS CONTEXTUAL PROFUNDO:
   - Informaci√≥n omitida que cambia el significado
   - Periodo temporal espec√≠fico de los datos
   - Definiciones y metodolog√≠as utilizadas
   - Comparaciones sesgadas o incompletas

5. PRIORIZACI√ìN PARA FACT-CHECKING:
   - Cr√≠tica: afirmaciones que pueden incitar violencia
   - Alta: datos sobre inmigraci√≥n, criminalidad, econom√≠a
   - Media: estad√≠sticas hist√≥ricas o sociales
   - Baja: opiniones disfrazadas de hechos

6. CONTEXTO ESPA√ëOL ESPEC√çFICO:
   - Contrasta con fuentes oficiales espa√±olas (INE, ministerios)
   - Considera debates pol√≠ticos actuales y sensibilidades sociales
   - Eval√∫a impacto en procesos democr√°ticos o cohesi√≥n social
   - Identifica conexiones con narrativas extremistas recurrentes

Prioriza afirmaciones que puedan alimentar extremismo o afectar decisiones pol√≠ticas importantes.
"""
        }
        
        return instructions.get(analysis_type, instructions[AnalysisType.COMPREHENSIVE])
    
    def _get_output_format(self, analysis_type: AnalysisType) -> str:
        """Get the output format specification for the analysis type."""
        schema = self.output_schemas.get(analysis_type, self.output_schemas[AnalysisType.COMPREHENSIVE])
        
        format_instruction = f"""
FORMATO DE RESPUESTA OBLIGATORIO:
Responde √öNICAMENTE con un objeto JSON v√°lido que siga esta estructura exacta:

{json.dumps(schema['schema'], indent=2, ensure_ascii=False)}

REQUISITOS:
- JSON v√°lido sin comentarios ni texto adicional
- Todas las claves requeridas deben estar presentes
- Valores en espa√±ol siguiendo las opciones especificadas
- Explicaciones claras y fundamentadas en evidencia
- M√°ximo 150 palabras por campo de texto
"""
        
        return format_instruction

def create_context_from_analysis(analysis_result: Dict) -> PromptContext:
    """Create prompt context from analysis results."""
    return PromptContext(
        content_type="social_media_post",
        far_right_score=analysis_result.get('far_right_score', 0.0),
        threat_level=analysis_result.get('threat_level', 'LOW'),
        detected_topics=[analysis_result.get('primary_topic', 'unknown')],
        claims_detected=analysis_result.get('verifiable_claims', []),
        pattern_matches=analysis_result.get('pattern_matches', []),
        targeted_groups=analysis_result.get('targeted_groups', [])
    )

def generate_enhanced_prompt(text: str, 
                           analysis_type: AnalysisType = AnalysisType.COMPREHENSIVE,
                           prior_analysis: Optional[Dict] = None,
                           complexity_level: str = "full") -> str:
    """
    Convenience function to generate enhanced prompts.
    """
    generator = EnhancedPromptGenerator()
    
    context = None
    if prior_analysis:
        context = create_context_from_analysis(prior_analysis)
    
    return generator.generate_prompt(text, analysis_type, context, complexity_level)

# Test the prompt generator
if __name__ == "__main__":
    test_text = "Los inmigrantes ilegales est√°n invadiendo Espa√±a. Soros controla a los medios para ocultarlo. ¬°Es hora de actuar!"
    
    generator = EnhancedPromptGenerator()
    
    # Test different analysis types
    for analysis_type in [AnalysisType.COMPREHENSIVE, AnalysisType.THREAT_ASSESSMENT, AnalysisType.MISINFORMATION]:
        print(f"\n{'='*60}")
        print(f"PROMPT FOR {analysis_type.value.upper()}")
        print(f"{'='*60}")
        
        prompt = generator.generate_prompt(test_text, analysis_type)
        print(prompt[:500] + "..." if len(prompt) > 500 else prompt)
